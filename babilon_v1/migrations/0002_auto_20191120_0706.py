# Generated by Django 2.2.7 on 2019-11-20 07:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('babilon_v1', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=128, null=True, verbose_name='Ulica')),
                ('city', models.CharField(blank=True, default='Kraków', max_length=64, null=True, verbose_name='Miasto')),
                ('post_code', models.CharField(blank=True, max_length=6, null=True, verbose_name='Kod pocztowy')),
                ('choice_count', models.IntegerField(default=1, verbose_name='Licznik wyboru')),
            ],
            options={
                'verbose_name_plural': 'Adresy',
                'ordering': ('client_id', 'street'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=128, verbose_name='Kategoria menu')),
                ('display', models.BooleanField(default=False, verbose_name='Czy ma być wyświeltlana w menu?')),
            ],
            options={
                'verbose_name_plural': 'Kategoria produktu',
                'ordering': ('category_name',),
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(blank=True, default=False, null=True)),
                ('number', models.CharField(blank=True, max_length=64, null=True, verbose_name='Numer zamówienia')),
                ('status', models.IntegerField(choices=[(1, 'Otwarte'), (2, 'W przygotowaniu'), (3, 'W dostawie'), (4, 'Zrealizowane'), (5, 'Anulowane')], default=1, verbose_name='Status zamówienia')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('time_start', models.TimeField(blank=True, null=True)),
                ('time_zero', models.TimeField(blank=True, null=True)),
                ('type_of_order', models.IntegerField(choices=[(1, 'Lokal'), (2, 'Wynos'), (3, 'Dostawa')], default=1, verbose_name='Rodzaj zamówienia')),
                ('pay_method', models.IntegerField(choices=[(1, 'Gotówka'), (2, 'Karta'), (3, 'Online_1'), (4, 'Online_2'), (5, 'Online_3')], default=1, verbose_name='Płatność zamówienia')),
                ('start_delivery_time', models.TimeField(blank=True, null=True, verbose_name='Czas wywywozu')),
                ('time_delivery_in', models.TimeField(blank=True, null=True, verbose_name='Czas dostarczenia')),
                ('discount', models.IntegerField(blank=True, default=0, null=True, verbose_name='Rabat')),
                ('info', models.CharField(blank=True, default='', max_length=256, null=True, verbose_name='Informacje')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Address', verbose_name='Adres')),
            ],
            options={
                'verbose_name_plural': 'Zamówienia',
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='ProductSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_name', models.CharField(max_length=64, verbose_name='Rozmiar produktu')),
                ('pizza', models.BooleanField(blank=True, null=True, verbose_name='Rozmiary dla pizzy?')),
                ('bottle', models.BooleanField(blank=True, null=True, verbose_name='Rozmairy napoi?')),
                ('fast_food', models.BooleanField(blank=True, null=True, verbose_name='Rozmiary fast_food?')),
                ('vege_topps_price', models.FloatField(blank=True, null=True, verbose_name='Cena dodatku warzywnego')),
                ('beef_topps_price', models.FloatField(blank=True, null=True, verbose_name='Cena dodatku mięsnego')),
                ('cheese_topps_price', models.FloatField(blank=True, null=True, verbose_name='Cena dodatku serowego')),
                ('product_price', models.FloatField(blank=True, null=True, verbose_name='Cena dodatki wg rozmiaru')),
            ],
            options={
                'verbose_name_plural': 'Rozmiary produktów',
                'ordering': ('size_name',),
            },
        ),
        migrations.CreateModel(
            name='Vat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vatrate', models.IntegerField(blank=True, null=True, verbose_name='Stawka VAT')),
            ],
        ),
        migrations.AlterModelOptions(
            name='myuser',
            options={'ordering': ('first_name', 'last_name'), 'verbose_name_plural': 'Osoby w firmie'},
        ),
        migrations.AddField(
            model_name='myuser',
            name='driver_status',
            field=models.IntegerField(blank=True, choices=[(1, 'Wolny'), (2, 'W dostawie'), (3, 'Powrót')], default=1, null=True, verbose_name='Status kierowcy'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='info',
            field=models.TextField(blank=True, null=True, verbose_name='Info'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='phone_number',
            field=models.CharField(blank=True, max_length=9, null=True, verbose_name='Numer telefonu'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='profession',
            field=models.IntegerField(blank=True, choices=[(0, 'Właściciel'), (1, 'Menager'), (2, 'Barman'), (3, 'Pizzer'), (4, 'Kierowca')], null=True, verbose_name='Stanowisko osoby'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='rate_per_drive',
            field=models.FloatField(blank=True, null=True, verbose_name='Stawka za wyjazd'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='rate_per_hour',
            field=models.FloatField(blank=True, null=True, verbose_name='Stawka na godzinę'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='type_of_employment',
            field=models.IntegerField(blank=True, choices=[(0, 'Umowa o prace'), (1, 'Umowa zlecenie'), (2, 'Brak danych'), (3, 'Licznik wyjazdów')], null=True, verbose_name='Rodzaj zatrudnienia'),
        ),
        migrations.CreateModel(
            name='WorkPlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workplace_name', models.CharField(max_length=128, verbose_name='Nazwa pizzerii')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Address', verbose_name='Adres pizzerii')),
            ],
        ),
        migrations.CreateModel(
            name='Purchases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True)),
                ('purchase_name', models.CharField(blank=True, default='', max_length=256, null=True, verbose_name='Nazwa')),
                ('type_of_cost', models.IntegerField(choices=[(0, 'Zakup towarów'), (1, 'Wypłata z kasy'), (2, 'Wypłata pracownikom'), (3, 'Wydatki stałe'), (4, 'Inne wydatki')], verbose_name='Rodzaj wydatku: ')),
                ('paymethod', models.IntegerField(choices=[(1, 'Gotówka'), (2, 'Karta'), (3, 'Online_1'), (4, 'Online_2'), (5, 'Online_3')], verbose_name='Płatność karta/gotówka')),
                ('cost', models.FloatField(verbose_name='Cena')),
                ('work_place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.WorkPlace', verbose_name='Lokal')),
            ],
            options={
                'verbose_name_plural': 'Wydatki',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=128, verbose_name='Nazwa produktu')),
                ('quantity', models.IntegerField(blank=True, default=1, null=True, verbose_name='Ilosc')),
                ('type_of_ingredient', models.IntegerField(blank=True, choices=[(1, 'Warzywny'), (2, 'Mięsny'), (3, 'Serowy'), (4, 'Dodatki extra'), (5, 'Rodzaj ciasta'), (6, 'Sosy płatne'), (7, 'Sosy darmowe')], null=True, verbose_name='Rodzaj składnika')),
                ('pizza_freestyle', models.BooleanField(default=False, verbose_name='Pizza freestyle?')),
                ('is_pizza_half', models.BooleanField(default=False, verbose_name='Pizza pol_na_pol?')),
                ('extra_price', models.FloatField(blank=True, default=0, null=True, verbose_name='Cena dodatków')),
                ('price', models.FloatField(blank=True, default=0, null=True, verbose_name='Cena podstawowa')),
                ('discount', models.IntegerField(blank=True, default=0, null=True, verbose_name='Rabat')),
                ('pizza_topp', models.BooleanField(default=False, verbose_name='Dodatek do pizzy')),
                ('dish_topp', models.BooleanField(default=False, verbose_name='Dodatek do dań')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Category', verbose_name='Kategoria produktu')),
                ('product_size', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.ProductSize', verbose_name='Rozmiar produktu')),
                ('tax', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Vat', verbose_name='Stawka VAT')),
                ('toppings', models.ManyToManyField(blank=True, to='babilon_v1.Products', verbose_name='Składniki')),
            ],
            options={
                'verbose_name_plural': 'Produkty',
                'ordering': ('category', 'product_name', 'product_size'),
            },
        ),
        migrations.CreateModel(
            name='ProductPriceSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_by_size', models.FloatField(blank=True, null=True, verbose_name='Cena dodatku wg rozmiaru')),
                ('product_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Products', verbose_name='Pordukt')),
                ('size_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.ProductSize', verbose_name='Rozmiar produktu')),
            ],
            options={
                'verbose_name_plural': 'Ceny produktów wg rozmiaru',
                'ordering': ('price_by_size',),
            },
        ),
        migrations.CreateModel(
            name='PositionOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, verbose_name='Ilosc')),
                ('halfpizza_name', models.CharField(blank=True, default='', max_length=126, null=True, verbose_name='Nazwa składana z dwóch produktów')),
                ('pizza_half', models.BooleanField(default=False, verbose_name='Pizza pol_na_pol')),
                ('change_topps_info', models.CharField(blank=True, default='', max_length=512, null=True, verbose_name='Info o zmiene składników')),
                ('change_topps_info_other_side', models.CharField(blank=True, default='', max_length=512, null=True, verbose_name='Info o zmianie składników na prawej')),
                ('cake_info', models.CharField(blank=True, default='', max_length=128, null=True, verbose_name='Zmiany ciasta')),
                ('sauces_free', models.CharField(blank=True, default='', max_length=256, null=True, verbose_name='Sosy darmowe')),
                ('sauces_pay', models.CharField(blank=True, default='', max_length=256, null=True, verbose_name='Sosy płatne')),
                ('extra_price', models.FloatField(blank=True, default=0, null=True, verbose_name='Cena dodatków')),
                ('info', models.CharField(blank=True, default='', max_length=256, null=True, verbose_name='Informacje')),
                ('price', models.FloatField(verbose_name='Cena podstawowa')),
                ('discount', models.IntegerField(blank=True, default=0, null=True, verbose_name='Rabat')),
                ('order_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Orders', verbose_name='Zamówienie nr.')),
                ('product_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Products', verbose_name='Product na zamówieniu')),
                ('product_id_pizza_right', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Pizza_on_rigth', to='babilon_v1.Products', verbose_name='Pizza prawa')),
                ('size_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.ProductSize', verbose_name='Rozmiar')),
                ('toppings_change_minus', models.ManyToManyField(blank=True, related_name='pizza_change_toppings_minus', to='babilon_v1.Products', verbose_name='Dodatki usunięte')),
                ('toppings_change_minus_other_side', models.ManyToManyField(blank=True, related_name='pizza_change_toppings_minus_other_side', to='babilon_v1.Products', verbose_name='Dodatki usunięte')),
                ('toppings_change_plus', models.ManyToManyField(blank=True, related_name='pizza_change_toppings_plus', to='babilon_v1.Products', verbose_name='Dodatki do dania')),
                ('toppings_change_plus_other_side', models.ManyToManyField(blank=True, related_name='pizza_change_toppings_plus_other_side', to='babilon_v1.Products', verbose_name='Dodatki do dania')),
            ],
            options={
                'verbose_name_plural': 'Pozycje na zamówieniu',
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='orders',
            name='barman_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Barman', to=settings.AUTH_USER_MODEL, verbose_name='Barman'),
        ),
        migrations.AddField(
            model_name='orders',
            name='driver_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Kierowca', to=settings.AUTH_USER_MODEL, verbose_name='Kierowca'),
        ),
        migrations.AddField(
            model_name='orders',
            name='workplace_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.WorkPlace', verbose_name='Pizzeria'),
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Imię Nazwisko')),
                ('phone_number', models.CharField(max_length=9, verbose_name='Numer telefonu')),
                ('status', models.IntegerField(blank=True, choices=[(0, 'Vip'), (1, 'Normal'), (2, 'Podejrzany')], default=1, null=True, verbose_name='Status klienta')),
                ('info', models.CharField(blank=True, max_length=256, null=True, verbose_name='Info')),
                ('work_place', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_address', to='babilon_v1.Address', verbose_name='Klient pizzerii')),
            ],
        ),
        migrations.AddField(
            model_name='address',
            name='client_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='babilon_v1.Clients', verbose_name='Klient'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_address', to='babilon_v1.Address', verbose_name='Adres osoby'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='work_place',
            field=models.ManyToManyField(blank=True, related_name='work_place', to='babilon_v1.WorkPlace', verbose_name='Możliwe miejsca pracy'),
        ),
    ]
